{"version":3,"sources":["Templates.js","Meme.js","App.js","reportWebVitals.js","index.js"],"names":["App","templates","setMeme","className","map","template","onClick","style","background","url","id","Meme","meme","useState","template_id","username","password","boxes","form","setForm","src","alt","Array","box_count","value","i","onChange","e","newBoxes","text","target","box","console","log","fetch","then","res","json","data","setTemplates","useEffect","response","memes","Templates","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8LAwBeA,MArBf,YAAoC,IAAtBC,EAAqB,EAArBA,UAAWC,EAAU,EAAVA,QACvB,OACE,qBAAKC,UAAU,YAAf,SAEIF,EAAUG,KAAI,SAACC,GACb,OAAO,qBAELF,UAAW,WACXG,QAAS,kBAAIJ,EAAQG,IAHhB,SAKL,qBACEE,MAAO,CAACC,WAAW,QAAD,OAAUH,EAASI,IAAnB,OAClBN,UAAU,WANPE,EAASK,U,cCyCXC,MA/Cf,YAAgC,IAAjBC,EAAgB,EAAhBA,KAAMV,EAAU,EAAVA,QACnB,EAAwBW,mBAAS,CAC/BC,YAAaF,EAAKF,GAClBK,SAAU,SACVC,SAAU,kBACVC,MAAO,KAJT,mBAAOC,EAAP,KAAaC,EAAb,KAqBA,OACE,sBAAKhB,UAAU,OAAf,UACE,qBAAKiB,IAAG,UAAKR,EAAKH,KAAOY,IAAI,KAAI,uBAE/B,YAAIC,MAAMV,EAAKW,YAAYnB,KAAI,SAACoB,EAAOC,GAAR,OAC7B,uBAEEC,SACE,SAACC,GACC,IAAMC,EAAWV,EAAKD,MACtBW,EAASH,GAAK,CACZI,KAAMF,EAAEG,OAAON,OAEjBL,EAAQ,2BAAID,GAAL,IAAWD,MAAOW,OAPxBH,MAYX,uBACA,wBAAQnB,QAjCS,WACnB,IAAIG,EAAG,4DAAwDS,EAAKJ,YAA7D,qBAAqFI,EAAKH,SAA1F,qBAA+GG,EAAKF,UAC3HE,EAAKD,MAAMb,KAAI,SAAC2B,EAAKN,GACnBhB,GAAG,iBAAcgB,EAAd,oBAA2BM,EAAIF,SAEpCG,QAAQC,IAAIxB,GACZyB,MAAMzB,GACH0B,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACJN,QAAQC,IAAIK,GACZpC,EAAQ,2BAAIU,GAAL,IAAWH,IAAK6B,EAAKA,KAAK7B,WAuBnC,sBACA,wBAAQH,QAAS,kBAAMJ,EAAQ,OAA/B,iCCpBSF,MApBf,WACE,MAAkCa,mBAAS,IAA3C,mBAAOZ,EAAP,KAAkBsC,EAAlB,KACA,EAAwB1B,mBAAS,MAAjC,mBAAOD,EAAP,KAAaV,EAAb,KAQA,OAPAsC,qBAAU,WACRN,MAAM,qCACHC,MAAK,SAAAM,GAAQ,OAAIA,EAASJ,UAC1BF,MAAK,SAACE,GACLE,EAAaF,EAAKC,KAAKI,YAE1B,IAED,sBAAKvC,UAAU,MAAf,UACE,gDAEY,OAATS,EAAgB,cAAC+B,EAAD,CAAW1C,UAAWA,EAAWC,QAASA,IAAa,cAAC,EAAD,CAAMU,KAAMA,EAAMV,QAASA,QCP5F0C,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBX,MAAK,YAAkD,IAA/CY,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.a7ccb25d.chunk.js","sourcesContent":["import './App.css';\r\n//import {useState, useEffect} from \"react\";\r\n\r\nfunction App({templates, setMeme}) {\r\n  return (\r\n    <div className=\"templates\">\r\n      {\r\n        templates.map((template)=>{\r\n          return <div\r\n            key={template.id}\r\n            className={\"template\"}\r\n            onClick={()=>setMeme(template)}\r\n          >\r\n            <div\r\n              style={{background: `url(\"${template.url}\")`}}\r\n              className='image'\r\n            />\r\n          </div>\r\n        })\r\n      }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","\r\nimport React, {useState} from 'react';\r\n\r\nfunction Meme({meme, setMeme}) {\r\n  const [form, setForm] = useState({\r\n    template_id: meme.id,\r\n    username: \"teasty\",\r\n    password: \"PPS$Asr52ttCfaF\",\r\n    boxes: []\r\n  })\r\n\r\n  const generateMeme = () => {\r\n    let url = `https://api.imgflip.com/caption_image?template_id=${form.template_id}&username=${form.username}&password=${form.password}`;\r\n    form.boxes.map((box, i) =>{\r\n      url += `&boxes[${i}][text]]=${box.text}`;\r\n    })\r\n    console.log(url)\r\n    fetch(url)\r\n      .then(res => res.json())\r\n      .then(data => {\r\n        console.log(data)\r\n        setMeme({...meme, url: data.data.url})\r\n      })\r\n  }\r\n\r\n  return (\r\n    <div className=\"meme\">\r\n      <img src={`${meme.url}`} alt=\"\"/><br/>\r\n      {\r\n        [...Array(meme.box_count)].map((value, i) =>\r\n          <input\r\n            key={i}\r\n            onChange = {\r\n              (e) => {\r\n                const newBoxes = form.boxes;\r\n                newBoxes[i] = {\r\n                  text: e.target.value\r\n                }\r\n                setForm({...form, boxes: newBoxes})\r\n              }\r\n            }\r\n          />)\r\n      }\r\n      <br/>\r\n      <button onClick={generateMeme}>Generate</button>\r\n      <button onClick={() => setMeme(null)}>Choose Template</button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Meme;","import './App.css';\nimport {useState, useEffect} from \"react\";\nimport Templates from \"./Templates\";\nimport Meme from \"./Meme\";\n\nfunction App() {\n  const [templates, setTemplates] = useState([])\n  const [meme, setMeme] = useState(null)\n  useEffect(()=>{\n    fetch(\"https://api.imgflip.com/get_memes\")\n      .then(response => response.json())\n      .then((json)=>{\n        setTemplates(json.data.memes)\n      })\n  }, [])\n  return (\n    <div className=\"App\">\n      <h1>Meme Generator</h1>\n      {\n        (meme === null)? <Templates templates={templates} setMeme={setMeme}/> : <Meme meme={meme} setMeme={setMeme}/>\n      }\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}